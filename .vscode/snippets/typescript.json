{
	"JSSModule": {
		"prefix": "template-jss",
		"body": [
			"import { JSSStyles } from 'styles/jss';",
			"",
			"export const styles: JSSStyles = {",
			"  ${TM_FILENAME_BASE}: {",
			"",
			"  },",
			"};",
			""
		],
		"description": "JSS Style Module"
	},
	"ReduxAction": {
		"prefix": "template-action",
		"body": [
			"export type EXAMPLE_ACTION = 'domain/EXAMPLE_ACTION';",
			"export const EXAMPLE_ACTION: EXAMPLE_ACTION = 'domain/EXAMPLE_ACTION';",
			"",
			"export type ExampleAction = {",
			"  type: EXAMPLE_ACTION,",
			"  data: DataType,",
			"};",
			"",
			"export const exampleAction = (data: DataType): ExampleAction => ({",
			"  type: EXAMPLE_ACTION,",
			"  data,",
			"});",
			""
		],
		"description": "Redux Action"
	},
	"ReduxController": {
		"prefix": "template-controller",
		"body": [
			"import { connect, Dispatch } from 'react-redux';",
			"import { State } from 'reducers';",
			"import { Component } from './Component';",
			"",
			"interface StateProps {",
			"",
			"}",
			"",
			"interface DispatchProps {",
			"",
			"}",
			"",
			"interface OwnProps {",
			"",
			"}",
			"",
			"const mapStateToProps = (state: State, ownProps: OwnProps): StateProps => {",
			"  return {",
			"",
			"  };",
			"};",
			"",
			"const mapDispatchToProps = (dispatch: Dispatch<State>, ownProps: OwnProps): DispatchProps => {",
			"  return {",
			"",
			"  };",
			"};",
			"",
			"export const controller = connect<StateProps, DispatchProps, OwnProps>",
			"    (mapStateToProps, mapDispatchToProps)(Component);",
			"",
			"export { controller as Component };",
			""
		],
		"description": "Redux Controller"
	},
	"ReduxReducer": {
		"prefix": "template-reducer",
		"body": [
			"import { Map } from 'immutable';",
			"import {",
			"  ExampleAction,",
			"  EXAMPLE_ACTION,",
			"} from 'actions/example';",
			"import { OtherAction } from './utils';",
			"",
			"export type ActionTypes = ExampleAction | OtherAction;",
			"export type ExampleState = Map<string, string>;",
			"",
			"const initialState = Map<string, string>();",
			"",
			"export const example = (",
			"  state: ExampleState = initialState,",
			"  action: ActionTypes,",
			"): ExampleState => {",
			"  switch (action.type) {",
			"    case EXAMPLE_ACTION:",
			"      return state.set('data', action.data);",
			"    case ANOTHER_ACTION:",
			"      return state.set('data', action.data);",
			"    default:",
			"      return state;",
			"  }",
			"};",
			""
		],
		"description": "Redux Reducer"
	}
}