// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Option$CourseEditor = require("../../../utils/reason/Option.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var ReactUtils$CourseEditor = require("../../../utils/reason/ReactUtils.bs.js");
var StyleUtils$CourseEditor = require("../../../styles/reason/StyleUtils.bs.js");
var StringUtils$CourseEditor = require("../../../utils/reason/StringUtils.bs.js");
var ToggleSwitch$CourseEditor = require("../../../components/common/ToggleSwitch.bs.js");
var NumericMatchOptionsStyle = require("./NumericMatchOptions.style");

function isNumeric($$char) {
  if ($$char >= 48) {
    return $$char <= 57;
  } else {
    return false;
  }
}

function isInequalityOp($$char) {
  if ($$char === /* "=" */61 || $$char === /* "<" */60 || $$char === /* ">" */62) {
    return true;
  } else {
    return $$char === /* "!" */33;
  }
}

function getInequalityOperator(expression) {
  var operatorIndex = StringUtils$CourseEditor.findIndex(/* None */0, expression, isInequalityOp);
  if (operatorIndex) {
    var index = operatorIndex[0];
    var match = Caml_string.get(expression, index);
    if (match >= 60) {
      if (match >= 63) {
        return /* Unknown */6;
      } else {
        switch (match - 60 | 0) {
          case 0 : 
              var exit = 0;
              var val;
              try {
                val = Caml_string.get(expression, index + 1 | 0);
                exit = 1;
              }
              catch (exn){
                if (exn === Caml_builtin_exceptions.not_found) {
                  return /* LT */3;
                } else {
                  throw exn;
                }
              }
              if (exit === 1) {
                if (val !== 61) {
                  return /* Unknown */6;
                } else {
                  return /* LTE */5;
                }
              }
              break;
          case 1 : 
              return /* EQ */0;
          case 2 : 
              var exit$1 = 0;
              var val$1;
              try {
                val$1 = Caml_string.get(expression, index + 1 | 0);
                exit$1 = 1;
              }
              catch (exn$1){
                if (exn$1 === Caml_builtin_exceptions.not_found) {
                  return /* GT */2;
                } else {
                  throw exn$1;
                }
              }
              if (exit$1 === 1) {
                if (val$1 !== 61) {
                  return /* Unknown */6;
                } else {
                  return /* GTE */4;
                }
              }
              break;
          
        }
      }
    } else if (match !== 33) {
      return /* Unknown */6;
    } else {
      var exit$2 = 0;
      var val$2;
      try {
        val$2 = Caml_string.get(expression, index + 1 | 0);
        exit$2 = 1;
      }
      catch (exn$2){
        if (exn$2 === Caml_builtin_exceptions.not_found) {
          return /* Unknown */6;
        } else {
          throw exn$2;
        }
      }
      if (exit$2 === 1) {
        if (val$2 !== 61) {
          return /* Unknown */6;
        } else {
          return /* NE */1;
        }
      }
      
    }
  } else {
    return /* Unknown */6;
  }
}

function isPrecision(matchPattern) {
  var match = StringUtils$CourseEditor.findIndex(/* None */0, matchPattern, (function (c) {
          return c === /* "#" */35;
        }));
  if (match) {
    return true;
  } else {
    return false;
  }
}

function isRange(matchPattern) {
  if (matchPattern.length) {
    var first = Caml_string.get(matchPattern, 0);
    var last = Caml_string.get(matchPattern, matchPattern.length - 1 | 0);
    if (first === /* "[" */91 || first === /* "(" */40) {
      if (last === /* "]" */93) {
        return true;
      } else {
        return last === /* ")" */41;
      }
    } else {
      return false;
    }
  } else {
    return false;
  }
}

function getConditionTypeFromMatch(matchPattern) {
  var match = isRange(matchPattern);
  if (match) {
    return /* Range */1;
  } else {
    return /* Value */0;
  }
}

function onTogglePrecision(matchPattern, responseId, onEditMatch) {
  var match = isPrecision(matchPattern);
  var newMatchPattern = match ? StringUtils$CourseEditor.remove(matchPattern, $$String.index(matchPattern, /* "#" */35), matchPattern.length - $$String.index(matchPattern, /* "#" */35) | 0) : matchPattern + "#1";
  return onEditMatch(responseId, newMatchPattern);
}

function renderConditionSelect() {
  return React.createElement("select", {
              className: StyleUtils$CourseEditor.classNames(/* :: */[
                    "form-control-sm",
                    /* :: */[
                      "custom-select",
                      /* :: */[
                        "mb-2",
                        /* :: */[
                          "mr-sm-2",
                          /* :: */[
                            "mb-sm-0",
                            /* :: */[
                              "condition",
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ])
            }, React.createElement("option", {
                  value: "eq"
                }, ReactUtils$CourseEditor.strEl("Equal to")), React.createElement("option", {
                  value: "ne"
                }, ReactUtils$CourseEditor.strEl("Not Equal to")), React.createElement("option", {
                  value: "gt"
                }, ReactUtils$CourseEditor.strEl("Greater than")), React.createElement("option", {
                  value: "lt"
                }, ReactUtils$CourseEditor.strEl("Less than")), React.createElement("option", {
                  value: "gte"
                }, ReactUtils$CourseEditor.strEl("Greater than Equal to")), React.createElement("option", {
                  value: "lte"
                }, ReactUtils$CourseEditor.strEl("Less than Equal to")));
}

function renderValue(jssClass, editMode, matchPattern, responseId, onEditMatch) {
  var matchStr = Option$CourseEditor.valueOr(matchPattern, "");
  var hashIndex = StringUtils$CourseEditor.findIndex(/* None */0, matchStr, (function (c) {
          return c === /* "#" */35;
        }));
  var value = hashIndex ? StringUtils$CourseEditor.substr(matchStr, 0, hashIndex[0]) : matchStr;
  var precisionValue;
  if (hashIndex) {
    var hashIndex$1 = hashIndex[0];
    precisionValue = StringUtils$CourseEditor.substr(matchStr, hashIndex$1 + 1 | 0, (matchStr.length - hashIndex$1 | 0) + 1 | 0);
  } else {
    precisionValue = "";
  }
  return React.createElement("div", {
              className: Curry._1(jssClass, "optionItem")
            }, React.createElement("div", {
                  className: Curry._1(jssClass, "condition")
                }, renderConditionSelect(/* () */0)), React.createElement("div", {
                  className: Curry._1(jssClass, "value")
                }, React.createElement("input", {
                      className: "form-control input-sm form-control-sm",
                      disabled: !editMode,
                      type: "number",
                      value: value,
                      onChange: (function ($$event) {
                          var value = $$event.target.value;
                          return onEditMatch(responseId, value + ("#" + precisionValue));
                        })
                    })));
}

function renderPrecision(jssClass, editMode, matchPattern, responseId, onEditMatch) {
  var matchStr = Option$CourseEditor.valueOr(matchPattern, "");
  var hashIndex = StringUtils$CourseEditor.findIndex(/* None */0, matchStr, (function (c) {
          return c === /* "#" */35;
        }));
  var value = hashIndex ? StringUtils$CourseEditor.substr(matchStr, 0, hashIndex[0]) : matchStr;
  var precisionValue;
  if (hashIndex) {
    var hashIndex$1 = hashIndex[0];
    precisionValue = StringUtils$CourseEditor.substr(matchStr, hashIndex$1 + 1 | 0, (matchStr.length - hashIndex$1 | 0) + 1 | 0);
  } else {
    precisionValue = "";
  }
  return React.createElement("div", {
              className: StyleUtils$CourseEditor.classNames(/* :: */[
                    Curry._1(jssClass, "optionsRow"),
                    /* :: */[
                      Curry._1(jssClass, "precision"),
                      /* [] */0
                    ]
                  ])
            }, ReasonReact.element(/* None */0, /* None */0, ToggleSwitch$CourseEditor.make(/* None */0, /* Some */[StyleUtils$CourseEditor.classNames(/* :: */[
                            Curry._1(jssClass, "precisionToggle"),
                            /* [] */0
                          ])], /* None */0, /* Some */[isPrecision(matchStr)], (function () {
                        return onTogglePrecision(matchStr, responseId, onEditMatch);
                      }), "Precision", /* array */[])), React.createElement("input", {
                  className: StyleUtils$CourseEditor.classNames(/* :: */[
                        Curry._1(jssClass, "precisionValue"),
                        /* :: */[
                          "form-control input-sm form-control-sm",
                          /* [] */0
                        ]
                      ]),
                  disabled: !editMode || !isPrecision(matchStr),
                  type: "number",
                  value: precisionValue,
                  onChange: (function ($$event) {
                      var newPrecisionValue = $$event.target.value;
                      return onEditMatch(responseId, value + ("#" + newPrecisionValue));
                    })
                }), React.createElement("div", {
                  className: StyleUtils$CourseEditor.classNames(/* :: */[
                        Curry._1(jssClass, "precisionLabel"),
                        /* :: */[
                          hashIndex ? "" : Curry._1(jssClass, "precisionLabelDisabled"),
                          /* [] */0
                        ]
                      ])
                }, ReactUtils$CourseEditor.strEl("Decimals")), React.createElement("div", {
                  className: StyleUtils$CourseEditor.classNames(/* :: */[
                        Curry._1(jssClass, "precisionSpacer"),
                        /* [] */0
                      ])
                }));
}

function renderRange(jssClass) {
  return React.createElement("div", {
              className: Curry._1(jssClass, "optionItem")
            });
}

function renderUnknown(jssClass) {
  return React.createElement("div", {
              className: Curry._1(jssClass, "optionItem")
            });
}

var componentName = "NumericMatchOptions";

var component = ReasonReact.statelessComponent(componentName);

function make(classes, className, editMode, responseId, matchPattern, onEditMatch) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var jssClass = function (param) {
                return StyleUtils$CourseEditor.jssClass(classes, param);
              };
              var match = getConditionTypeFromMatch(Option$CourseEditor.valueOr(matchPattern, ""));
              var tmp;
              switch (match) {
                case 0 : 
                    tmp = renderValue(jssClass, editMode, matchPattern, responseId, onEditMatch);
                    break;
                case 1 : 
                    tmp = renderRange(jssClass);
                    break;
                case 2 : 
                    tmp = renderUnknown(jssClass);
                    break;
                
              }
              var match$1 = getConditionTypeFromMatch(Option$CourseEditor.valueOr(matchPattern, ""));
              var tmp$1;
              switch (match$1) {
                case 0 : 
                    tmp$1 = renderPrecision(jssClass, editMode, matchPattern, responseId, onEditMatch);
                    break;
                case 1 : 
                case 2 : 
                    tmp$1 = React.createElement("div", undefined);
                    break;
                
              }
              return React.createElement("div", {
                          className: StyleUtils$CourseEditor.classNames(/* :: */[
                                componentName,
                                /* :: */[
                                  StyleUtils$CourseEditor.jssClass(classes, componentName),
                                  /* :: */[
                                    Option$CourseEditor.valueOr(className, ""),
                                    /* [] */0
                                  ]
                                ]
                              ])
                        }, React.createElement("div", {
                              className: StyleUtils$CourseEditor.jssClass(classes, "optionsRow")
                            }, React.createElement("div", {
                                  className: StyleUtils$CourseEditor.jssClass(classes, "conditionType")
                                }, React.createElement("select", {
                                      className: "form-control-sm custom-select mb-2 mr-sm-2 mb-sm-0"
                                    }, React.createElement("option", {
                                          value: "value"
                                        }, ReactUtils$CourseEditor.strEl("Value")), React.createElement("option", {
                                          value: "range"
                                        }, ReactUtils$CourseEditor.strEl("Range")))), tmp), tmp$1);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var jsComponentUnstyled = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.classes, Js_primitive.null_undefined_to_opt(jsProps.className), jsProps.editMode, jsProps.responseId, Js_primitive.null_undefined_to_opt(jsProps.matchPattern), jsProps.onEditMatch);
      }));

var jsComponent = StyleUtils$CourseEditor.injectSheet(NumericMatchOptionsStyle.styles, jsComponentUnstyled);

exports.isNumeric = isNumeric;
exports.isInequalityOp = isInequalityOp;
exports.getInequalityOperator = getInequalityOperator;
exports.isPrecision = isPrecision;
exports.isRange = isRange;
exports.getConditionTypeFromMatch = getConditionTypeFromMatch;
exports.onTogglePrecision = onTogglePrecision;
exports.renderConditionSelect = renderConditionSelect;
exports.renderValue = renderValue;
exports.renderPrecision = renderPrecision;
exports.renderRange = renderRange;
exports.renderUnknown = renderUnknown;
exports.componentName = componentName;
exports.component = component;
exports.make = make;
exports.jsComponentUnstyled = jsComponentUnstyled;
exports.jsComponent = jsComponent;
/* component Not a pure module */
