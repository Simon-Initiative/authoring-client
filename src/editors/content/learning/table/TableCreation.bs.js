// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var ListUtils$CourseEditor = require("../../../../utils/reason/ListUtils.bs.js");

var component = ReasonReact.reducerComponent("TableCreation");

function str(prim) {
  return prim;
}

function rowStyle(param) {
  return {
          whiteSpace: "nowrap"
        };
}

function cellContainerStyle(param) {
  return {
          cursor: "pointer",
          display: "inline-block",
          padding: "2px"
        };
}

function cellStyle(isHighlighted) {
  var backgroundColor = isHighlighted ? "#81abef" : "#DDDDDD";
  return {
          backgroundColor: backgroundColor,
          border: "1px solid #DDDDDD",
          display: "inline-block",
          height: "15px",
          margin: "0px",
          padding: "0px",
          width: "15px",
          borderRadius: "3px"
        };
}

function make(onTableCreate, onHide, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var state = self[/* state */1];
              var numRows = state ? Caml_primitive.caml_int_min(Caml_primitive.caml_int_max(state[0] + 2 | 0, 6), 16) : 6;
              var numCols = state ? Caml_primitive.caml_int_min(Caml_primitive.caml_int_max(state[1] + 2 | 0, 6), 16) : 6;
              var rows = $$Array.of_list(ListUtils$CourseEditor.range(1, numRows));
              var cols = $$Array.of_list(ListUtils$CourseEditor.range(1, numCols));
              var width = String(Caml_int32.imul(cols.length, 19) + 10 | 0) + "px";
              var height = String(Caml_int32.imul(rows.length, 28) + 50 | 0) + "px";
              var gridStyle = {
                height: height,
                padding: "0px",
                width: width
              };
              var labelStyle = {
                color: "#808080",
                textAlign: "center",
                width: width
              };
              var isHighlighted = function (row, col) {
                if (state && state[0] >= row) {
                  return state[1] >= col;
                } else {
                  return false;
                }
              };
              var mapRow = function (row) {
                return React.createElement("div", {
                            key: "row" + String(row)
                          }, $$Array.map((function (col) {
                                  return React.createElement("div", {
                                              key: "col" + String(col),
                                              style: cellContainerStyle(/* () */0),
                                              onClick: (function (_e) {
                                                  Curry._1(onHide, /* () */0);
                                                  Curry._1(self[/* send */3], /* Clear */0);
                                                  return Curry._2(onTableCreate, row, col);
                                                }),
                                              onMouseEnter: (function (_e) {
                                                  return Curry._1(self[/* send */3], /* MouseEnter */[
                                                              row,
                                                              col
                                                            ]);
                                                })
                                            }, React.createElement("div", {
                                                  style: cellStyle(isHighlighted(row, col))
                                                }));
                                }), cols));
              };
              var cells = $$Array.map(mapRow, rows);
              var sizeLabel = state ? String(state[0]) + (" by " + String(state[1])) : "";
              return React.createElement("div", {
                          style: gridStyle
                        }, React.createElement("div", {
                              style: labelStyle
                            }, "Create Table"), cells, React.createElement("div", {
                              style: labelStyle
                            }, sizeLabel));
            }),
          /* initialState */(function (param) {
              return /* Uninitialized */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (action) {
                return /* Update */Block.__(0, [/* Hovering */[
                            action[0],
                            action[1]
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* Uninitialized */0]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.onTableCreate, jsProps.onHide, /* array */[]);
      }));

var initialState = /* Uninitialized */0;

var minRows = 6;

var maxRows = 16;

var minCols = 6;

var maxCols = 16;

exports.initialState = initialState;
exports.component = component;
exports.str = str;
exports.minRows = minRows;
exports.maxRows = maxRows;
exports.minCols = minCols;
exports.maxCols = maxCols;
exports.rowStyle = rowStyle;
exports.cellContainerStyle = cellContainerStyle;
exports.cellStyle = cellStyle;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
